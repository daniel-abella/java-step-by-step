import java.util.ArrayList;
import java.util.List;


public class Colecoes {

	/**
	 * @param args
	 */
	public static void main(String[] args) {


		/*
		Motivos mais simples:

		1 - Parametrizar o tipo contido dentro de uma coleção
		2 - Eliminar o uso de cast
		3 - Impedir que sejam adicionados elementos que não
		    passam no instaceof do tipo parametrizado


		Generics e códigos antigos

		1 - Pode ser usado com código sem genérics sem problemas
		2 - Permite algumas aberrações no código


		Generics e polimorfismo

		1 - Atribuições
		2 - Passagem de parâmetros simples
		3 - Especificando herança


		Classes e métodos

		1 - É possível declarar classes genéricas e métodos também

		*/


		//Tipagem

		List lista = new ArrayList();
		lista.add("aaaa");
		lista.add(1);
		String elemento = (String) lista.get(0);

		List<String> listaTipada = new ArrayList<String>();
		listaTipada.add("");
//		listaTipada.add(1);

		List<Number> numeros = new ArrayList<Number>();
		numeros.add(1);

		List<Integer> numerosInteiros = new ArrayList<Integer>();
		imprimeNumeros(numeros);
		imprimeNumeros(numerosInteiros);
		imprimeNumerosSemTipo(numeros);

		Number[] numerosArray = new Integer[5];

		List<Number> numeros2 = new ArrayList<Integer>();


	}

	private static void imprimeNumeros(List<Number> numeros){

		for (Number number : numeros) {
			System.out.println(number);
		}
	}

	private static void imprimeNumerosExtends(List<Number> numeros){

		for (Number number : numeros) {
			System.out.println(number);
		}
	}

	private static void imprimeNumerosSemTipo(List numeros){

		numeros.add("aaaaaaaaaaaaaaa");

		System.out.println(numeros.get(1));
	}

}
